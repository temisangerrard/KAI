rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions - Permissive for direct Firestore access pattern
    function isAuthenticated() {
      // Allow direct Firestore operations (your authentication pattern)
      // Application handles authentication via CDP and service layer
      return true;
    }
    
    function isOwner(userId) {
      // Allow access - application handles ownership verification
      return true;
    }
    
    function isAdmin() {
      // Allow access - application handles admin verification via AdminAuthService
      return true;
    }
    
    function isValidCommitment(data) {
      return data.keys().hasAll(['userId', 'predictionId', 'tokensCommitted', 'position', 'odds', 'potentialWinning', 'status', 'committedAt']) &&
             data.userId is string &&
             data.predictionId is string &&
             data.tokensCommitted is number &&
             data.tokensCommitted > 0 &&
             data.tokensCommitted <= 10000 &&
             data.position in ['yes', 'no'] &&
             data.odds is number &&
             data.odds > 0 &&
             data.potentialWinning is number &&
             data.potentialWinning >= 0 &&
             data.status in ['active', 'won', 'lost', 'refunded'] &&
             data.committedAt is timestamp;
    }
    
    // Users collection - supports hybrid CDP/Firebase authentication
    match /users/{userId} {
      // Users can read/write their own data using Firebase UID, admins can access all
      // This supports CDP users who are mapped to Firebase UIDs via wallet_uid_mappings
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Wallet UID mappings collection - needed for CDP user authentication
    match /wallet_uid_mappings/{walletAddress} {
      // Allow read/write for user authentication flow
      allow read, write: if true;
    }
    
    // User balances collection
    match /user_balances/{userId} {
      allow read, write: if true; // Allow all access - application handles verification
    }
    
    // Token transactions collection
    match /token_transactions/{transactionId} {
      allow read, write: if true; // Allow all access - application handles verification
    }
    
    // Token packages collection (read-only for users, admin can manage)
    match /token_packages/{packageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Prediction commitments collection
    match /prediction_commitments/{commitmentId} {
      // Allow all operations - application handles verification
      allow read, write: if true;
    }
    
    // Markets collection
    match /markets/{marketId} {
      allow read: if true; // Public read access for markets (needed for API routes)
      allow write: if true; // Allow all writes - application handles admin verification
    }
    
    // Predictions collection (legacy - keeping for backward compatibility)
    match /predictions/{predictionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }
    
    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Leaderboard collection (read-only for users)
    match /leaderboard/{entryId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Admin users collection - CRITICAL: This was missing and breaking isAdmin() function
    match /admin_users/{userId} {
      // Allow users to read their own admin status (needed for isAdmin() function to work)
      allow read: if isAuthenticated() && isOwner(userId);
      // Only existing admins can modify admin status
      allow write: if isAdmin();
    }
    
    // Analytics collection (admin only)
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
    
    // App configuration (admin only)
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Archived commitments collection (admin only)
    match /prediction_commitments_archived/{commitmentId} {
      allow read, write: if true; // Allow all access - application handles verification
    }
    
    // Market resolutions collection
    match /market_resolutions/{resolutionId} {
      allow read, write: if true; // Allow all access - application handles verification
    }
    
    // Resolution actions collection (for logging)
    match /resolution_actions/{actionId} {
      allow read, write: if true; // Allow all access - application handles verification
    }
    
    // Payout distributions collection
    match /payout_distributions/{payoutId} {
      allow read, write: if true; // Allow all access - application handles verification
    }
    
    // Any other collections that might be accessed during market operations
    match /{document=**} {
      allow read, write: if true; // Fallback rule - allow all access
    }
  }
}