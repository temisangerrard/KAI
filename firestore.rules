rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }
    
    function isValidCommitment(data) {
      return data.keys().hasAll(['userId', 'predictionId', 'tokensCommitted', 'position', 'odds', 'potentialWinning', 'status', 'committedAt']) &&
             data.userId is string &&
             data.predictionId is string &&
             data.tokensCommitted is number &&
             data.tokensCommitted > 0 &&
             data.tokensCommitted <= 10000 &&
             data.position in ['yes', 'no'] &&
             data.odds is number &&
             data.odds > 0 &&
             data.potentialWinning is number &&
             data.potentialWinning >= 0 &&
             data.status in ['active', 'won', 'lost', 'refunded'] &&
             data.committedAt is timestamp;
    }
    
    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // User balances collection
    match /user_balances/{userId} {
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Token transactions collection
    match /token_transactions/{transactionId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }
    
    // Token packages collection (read-only for users, admin can manage)
    match /token_packages/{packageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Prediction commitments collection
    match /prediction_commitments/{commitmentId} {
      // Users can read their own commitments, admins can read all
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      
      // Users can create commitments for themselves with proper validation
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.userId) &&
                   isValidCommitment(request.resource.data) &&
                   request.resource.data.status == 'active';
      
      // Only system/admin can update commitments (for resolution)
      allow update: if isAdmin() &&
                   // Ensure critical fields cannot be changed
                   request.resource.data.userId == resource.data.userId &&
                   request.resource.data.predictionId == resource.data.predictionId &&
                   request.resource.data.tokensCommitted == resource.data.tokensCommitted &&
                   request.resource.data.position == resource.data.position &&
                   request.resource.data.odds == resource.data.odds &&
                   request.resource.data.committedAt == resource.data.committedAt;
      
      // Only admin can delete commitments
      allow delete: if isAdmin();
    }
    
    // Markets collection
    match /markets/{marketId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Predictions collection (legacy - keeping for backward compatibility)
    match /predictions/{predictionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }
    
    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Leaderboard collection (read-only for users)
    match /leaderboard/{entryId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Analytics collection (admin only)
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
    
    // App configuration (admin only)
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Archived commitments collection (admin only)
    match /prediction_commitments_archived/{commitmentId} {
      allow read, write: if isAdmin();
    }
  }
}